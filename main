import numpy as np

# Константы
e = 1.6e-19  # Элементарный заряд, Кл
m = 9.1e-31  # Масса электрона, кг
r = 4.5e-2  # Внутренний радиус, м
R = 10e-2   # Внешний радиус, м
L = 18e-2   # Длина конденсатора, м
V0 = 5.5e6  # Начальная скорость, м/с

# Функция для расчета электрического поля при заданной разности потенциалов U
def electric_field(U, r, R):
    return U / (R * np.log(R / r))

# Параметры для симуляции
num_points = 1000
U_min = 1 # Начальное приближение для минимального напряжения
t_max = L / V0 # Максимальное время движения электрона через конденсатор
dt = t_max / num_points

# Массив времени
time = np.linspace(0, t_max, num_points)

# Массивы для хранения положения и скорости
y = np.zeros(num_points)
vy = np.zeros(num_points)
ay = np.zeros(num_points)

# Поиск минимального напряжения методом итераций
for U in np.linspace(U_min, 1000, 1000):  # Постепенное увеличение U
    E = electric_field(U, r, R)
    ay[:] = (e * E) / m  # Постоянное ускорение из-за электрического поля
    vy = ay * time  # Скорость
    y = 0.5 * ay * time**2  # Положение
    if np.max(np.abs(y)) >= (R - r):  # Если электрон выходит за пределы обкладок
        U_min = U  # Найдено минимальное напряжение
        break

# Окончательные расчеты с использованием минимального напряжения
E_min = electric_field(U_min, r, R)
ay[:] = (e * E_min) / m
vy = ay * time
y = 0.5 * ay * time**2

# Время полета и конечная скорость на выходе из конденсатора
final_time = t_max
final_velocity = np.sqrt(vy[-1]**2 + V0**2)

# Вывод результатов
print(f"Минимальная разность потенциалов (U_min): {U_min:.2f} В")
print(f"Время полета (t): {final_time:.2e} с")
print(f"Конечная скорость (V_final): {final_velocity:.2e} м/с")
